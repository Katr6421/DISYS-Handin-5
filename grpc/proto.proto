//protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative grpc/proto.proto

syntax = "proto3";

package simpleGuide;

option go_package = "grpc/proto";

message ClientPublishMessage {
  int64 ClientId = 1;
  string Message = 2;
  int64 LamportTimestamp = 3;
}

message ServerPublishMessageOk {
  string ServerName = 1; 
  string Time = 2;
}

message ClientConnectMessage {
  string Name = 1;
  int64 ClientId = 2;
}

message MessageStreamConnection{
  string StreamMessage = 1;
  int64 LamportTimestamp = 2;
}

//client pov
service TimeAsk {
  rpc SendMessage(ClientPublishMessage) returns (ServerPublishMessageOk);
  rpc ConnectToServer(ClientConnectMessage) returns (stream MessageStreamConnection);
}

service Auction {
  rpc Bid(Amount) returns (ConfirmationOfBid);
  rpc Result(Request) returns (AuctionStatus);
  rpc Heartbeat(SendHeartbeat) returns (Response);
}

message Amount {
  int32 ClientId = 1;
  int32 Bid = 2;
  int32 LamportTimestamp = 3;
}

message ConfirmationOfBid {
  int32 ClientId = 1; //for at huske hvem skal have beskeden
  string ConfirmationMsg = 2;
  int32 LamportTimestamp = 3; //måske?
}

message Request {
  int32 ClientId = 1;
  int32 LamportTimestamp = 2;
  string msg = 3;
}

message AuctionStatus {
  int32 ClientId = 1;
  int32 LamportTimestamp = 2; //måske?
  string StatusMsg = 3;
}

message SendHeartbeat {
  int32 ServerID = 1;
}

message Response {
  int32 Ack = 1;
  int32 ServerID = 2;
}

